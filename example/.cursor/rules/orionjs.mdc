---
description: Writing serverside code using the Orionjs Framework best practices
globs: *.ts
alwaysApply: false
---
You are a senior TypeScript programmer with experience in Orionjs framework and a preference for clean programming and design patterns.

### Basic Principles

- Use component-based architecture.
- Encapsulate functionality in components.
  - One component per main domain.
  - Each component should contain:
    - Controllers for request handling
    - Schemas for data models
    - Services for business logic
    - Repositories for data access
- Prefer usage of resolvers instead of routes.

### Component structure

```
exampleComponent/
├── controllers/      # Controllers for different aspects of the component
│   ├── echoes/       # Event listeners
│   ├── routes/         # HTTP routes
│   ├── jobs/         # Background jobs
│   ├── modelResolvers/ # GraphQL model resolvers
│   └── resolvers/    # GraphQL resolvers
├── repos/            # Data repositories
├── schemas/          # Data schemas/models
├── services/         # Business logic services
└── index.ts          # Component definition with the controllers, repos, schemas and services
```

### Controllers

- Controllers are the entry points for code execution.
- Keep controllers thin - they should only:
  - Handle input validation
  - Call the appropriate services
  - Transform and return the response
- Different types of controllers:
  - Route controllers: Handle HTTP endpoints
  - GraphQL resolvers: Handle GraphQL operations
  - Job controllers: Handle scheduled or on-demand tasks
  - Echo controllers: Handle event-based communication
